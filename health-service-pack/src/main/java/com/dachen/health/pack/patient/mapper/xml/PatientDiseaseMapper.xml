<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dachen.health.pack.patient.mapper.PatientDiseaseMapper">
  <resultMap id="BaseResultMap" type="com.dachen.health.pack.patient.model.PatientDisease">
    <!--
      WARNING - @mbggenerated
    -->
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="patient_id" jdbcType="INTEGER" property="patientId" />
    <result column="doctor_id" jdbcType="INTEGER" property="doctorId" />
    <result column="order_id" jdbcType="INTEGER" property="orderId" />
    <result column="disease_type_id" jdbcType="VARCHAR" property="diseaseTypeId" />
    <result column="disease_type_name" jdbcType="VARCHAR" property="diseaseTypeName" />
    <result column="group_id" jdbcType="VARCHAR" property="groupId" />
  </resultMap>
  
  <sql id="Example_Where_Clause">
    <!--
      WARNING - @mbggenerated
    -->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--
      WARNING - @mbggenerated
    -->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbggenerated
    -->
    id, user_id, patient_id, doctor_id, order_id, disease_type_id, disease_type_name, 
    group_id
  </sql>
  <select id="selectByExample" parameterType="com.dachen.health.pack.patient.model.PatientDiseaseExample" resultMap="BaseResultMap">
    <!--
      WARNING - @mbggenerated
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from t_patient_disease
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--
      WARNING - @mbggenerated
    -->
    select 
    <include refid="Base_Column_List" />
    from t_patient_disease
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--
      WARNING - @mbggenerated
    -->
    delete from t_patient_disease
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.dachen.health.pack.patient.model.PatientDiseaseExample">
    <!--
      WARNING - @mbggenerated
    -->
    delete from t_patient_disease
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.dachen.health.pack.patient.model.PatientDisease">
    <!--
      WARNING - @mbggenerated
    -->
    insert into t_patient_disease (id, user_id, patient_id, 
      doctor_id, order_id, disease_type_id, 
      disease_type_name, group_id)
    values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{patientId,jdbcType=INTEGER}, 
      #{doctorId,jdbcType=INTEGER}, #{orderId,jdbcType=INTEGER}, #{diseaseTypeId,jdbcType=VARCHAR}, 
      #{diseaseTypeName,jdbcType=VARCHAR}, #{groupId,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.dachen.health.pack.patient.model.PatientDisease">
    <!--
      WARNING - @mbggenerated
    -->
    insert into t_patient_disease
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="patientId != null">
        patient_id,
      </if>
      <if test="doctorId != null">
        doctor_id,
      </if>
      <if test="orderId != null">
        order_id,
      </if>
      <if test="diseaseTypeId != null">
        disease_type_id,
      </if>
      <if test="diseaseTypeName != null">
        disease_type_name,
      </if>
      <if test="groupId != null">
        group_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="patientId != null">
        #{patientId,jdbcType=INTEGER},
      </if>
      <if test="doctorId != null">
        #{doctorId,jdbcType=INTEGER},
      </if>
      <if test="orderId != null">
        #{orderId,jdbcType=INTEGER},
      </if>
      <if test="diseaseTypeId != null">
        #{diseaseTypeId,jdbcType=VARCHAR},
      </if>
      <if test="diseaseTypeName != null">
        #{diseaseTypeName,jdbcType=VARCHAR},
      </if>
      <if test="groupId != null">
        #{groupId,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.dachen.health.pack.patient.model.PatientDiseaseExample" resultType="java.lang.Integer">
    <!--
      WARNING - @mbggenerated
    -->
    select count(*) from t_patient_disease
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--
      WARNING - @mbggenerated
    -->
    update t_patient_disease
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.patientId != null">
        patient_id = #{record.patientId,jdbcType=INTEGER},
      </if>
      <if test="record.doctorId != null">
        doctor_id = #{record.doctorId,jdbcType=INTEGER},
      </if>
      <if test="record.orderId != null">
        order_id = #{record.orderId,jdbcType=INTEGER},
      </if>
      <if test="record.diseaseTypeId != null">
        disease_type_id = #{record.diseaseTypeId,jdbcType=VARCHAR},
      </if>
      <if test="record.diseaseTypeName != null">
        disease_type_name = #{record.diseaseTypeName,jdbcType=VARCHAR},
      </if>
      <if test="record.groupId != null">
        group_id = #{record.groupId,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--
      WARNING - @mbggenerated
    -->
    update t_patient_disease
    set id = #{record.id,jdbcType=INTEGER},
      user_id = #{record.userId,jdbcType=INTEGER},
      patient_id = #{record.patientId,jdbcType=INTEGER},
      doctor_id = #{record.doctorId,jdbcType=INTEGER},
      order_id = #{record.orderId,jdbcType=INTEGER},
      disease_type_id = #{record.diseaseTypeId,jdbcType=VARCHAR},
      disease_type_name = #{record.diseaseTypeName,jdbcType=VARCHAR},
      group_id = #{record.groupId,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.dachen.health.pack.patient.model.PatientDisease">
    <!--
      WARNING - @mbggenerated
    -->
    update t_patient_disease
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="patientId != null">
        patient_id = #{patientId,jdbcType=INTEGER},
      </if>
      <if test="doctorId != null">
        doctor_id = #{doctorId,jdbcType=INTEGER},
      </if>
      <if test="orderId != null">
        order_id = #{orderId,jdbcType=INTEGER},
      </if>
      <if test="diseaseTypeId != null">
        disease_type_id = #{diseaseTypeId,jdbcType=VARCHAR},
      </if>
      <if test="diseaseTypeName != null">
        disease_type_name = #{diseaseTypeName,jdbcType=VARCHAR},
      </if>
      <if test="groupId != null">
        group_id = #{groupId,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.dachen.health.pack.patient.model.PatientDisease">
    <!--
      WARNING - @mbggenerated
    -->
    update t_patient_disease
    set user_id = #{userId,jdbcType=INTEGER},
      patient_id = #{patientId,jdbcType=INTEGER},
      doctor_id = #{doctorId,jdbcType=INTEGER},
      order_id = #{orderId,jdbcType=INTEGER},
      disease_type_id = #{diseaseTypeId,jdbcType=VARCHAR},
      disease_type_name = #{diseaseTypeName,jdbcType=VARCHAR},
      group_id = #{groupId,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  
  <select id="findByParam" parameterType="com.dachen.health.pack.patient.model.PatientDiseaseParam" resultType="java.util.HashMap" >
  	SELECT 
	  a.doctor_id,
	  COUNT(1) AS 'count'
	FROM
	  (SELECT DISTINCT 
	    (t.`user_id`),
	    t.`doctor_id` 
	  FROM
	    `t_patient_disease` t 
	  WHERE t.`doctor_id` IN 
	  		<foreach collection="doctorIds" item="item" open="(" separator="," close=")">
				#{item}
			</foreach> 
	    AND t.`group_id` = '${groupId}' 
	    AND t.`user_id` IN 
			<foreach collection="userIds" item="item" open="(" separator="," close=")">
				#{item}
			</foreach>
		) a
	GROUP BY a.doctor_id ORDER BY COUNT DESC
  </select>
  
  <select id="findPatientIdByDoctorAndGroup" parameterType="com.dachen.health.pack.patient.model.PatientDiseaseParam" resultType="java.lang.Integer" >
  		SELECT DISTINCT(t.`user_id`) FROM t_patient_disease t WHERE t.`doctor_id` = ${doctorId} AND t.`group_id` = '${groupId}';	
  </select>
  
</mapper>