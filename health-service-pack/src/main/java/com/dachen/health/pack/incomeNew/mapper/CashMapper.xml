<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.dachen.health.pack.incomeNew.mapper.CashMapper" >
  <resultMap id="BaseResultMap" type="com.dachen.health.pack.incomeNew.entity.po.Cash" >
    <!--
      WARNING - @mbggenerated
    -->
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="doctor_id" property="doctorId" jdbcType="INTEGER" />
    <result column="group_id" property="groupId" jdbcType="VARCHAR" />
    <result column="object_type" property="objectType" jdbcType="INTEGER" />
    <result column="money" property="money" jdbcType="DOUBLE" />
    <result column="create_user_id" property="createUserId" jdbcType="INTEGER" />
    <result column="create_date" property="createDate" jdbcType="BIGINT" />
    <result column="settle_id" property="settleId" jdbcType="INTEGER" />
  </resultMap>
  
  <resultMap type="com.dachen.health.pack.incomeNew.entity.vo.CashVO" id="cashVO">
  		<result column="create_date" property="createDate" jdbcType="BIGINT" />
  		<result column="money" property="money" jdbcType="DOUBLE" />
  		<result column="bank_name" property="bankName" />
  		<result column="user_real_name" property="userRealName" />
  		<result column="bank_id" property="bankID" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <!--
      WARNING - @mbggenerated
    -->
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <!--
      WARNING - @mbggenerated
    -->
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    <!--
      WARNING - @mbggenerated
    -->
    id, doctor_id, group_id, object_type, money, create_user_id, create_date, settle_id
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.dachen.health.pack.incomeNew.entity.po.CashExample" >
    <!--
      WARNING - @mbggenerated
    -->
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from t_cash
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    <!--
      WARNING - @mbggenerated
    -->
    select 
    <include refid="Base_Column_List" />
    from t_cash
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    <!--
      WARNING - @mbggenerated
    -->
    delete from t_cash
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.dachen.health.pack.incomeNew.entity.po.CashExample" >
    <!--
      WARNING - @mbggenerated
    -->
    delete from t_cash
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.dachen.health.pack.incomeNew.entity.po.Cash" >
    <!--
      WARNING - @mbggenerated
    -->
    insert into t_cash (id, doctor_id, group_id, 
      object_type, money, create_user_id, 
      create_date, settle_id)
    values (#{id,jdbcType=INTEGER}, #{doctorId,jdbcType=INTEGER}, #{groupId,jdbcType=VARCHAR}, 
      #{objectType,jdbcType=INTEGER}, #{money,jdbcType=DOUBLE}, #{createUserId,jdbcType=INTEGER}, 
      #{createDate,jdbcType=BIGINT}, #{settleId,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.dachen.health.pack.incomeNew.entity.po.Cash" keyProperty="id" useGeneratedKeys="true">
    <!--
      WARNING - @mbggenerated
    -->
    insert into t_cash
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="doctorId != null" >
        doctor_id,
      </if>
      <if test="groupId != null" >
        group_id,
      </if>
      <if test="objectType != null" >
        object_type,
      </if>
      <if test="money != null" >
        money,
      </if>
      <if test="createUserId != null" >
        create_user_id,
      </if>
      <if test="createDate != null" >
        create_date,
      </if>
      <if test="settleId != null" >
        settle_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="doctorId != null" >
        #{doctorId,jdbcType=INTEGER},
      </if>
      <if test="groupId != null" >
        #{groupId,jdbcType=VARCHAR},
      </if>
      <if test="objectType != null" >
        #{objectType,jdbcType=INTEGER},
      </if>
      <if test="money != null" >
        #{money,jdbcType=DOUBLE},
      </if>
      <if test="createUserId != null" >
        #{createUserId,jdbcType=INTEGER},
      </if>
      <if test="createDate != null" >
        #{createDate,jdbcType=BIGINT},
      </if>
      <if test="settleId != null" >
        #{settleId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.dachen.health.pack.incomeNew.entity.po.CashExample" resultType="java.lang.Integer" >
    <!--
      WARNING - @mbggenerated
    -->
    select count(*) from t_cash
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    <!--
      WARNING - @mbggenerated
    -->
    update t_cash
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.doctorId != null" >
        doctor_id = #{record.doctorId,jdbcType=INTEGER},
      </if>
      <if test="record.groupId != null" >
        group_id = #{record.groupId,jdbcType=VARCHAR},
      </if>
      <if test="record.objectType != null" >
        object_type = #{record.objectType,jdbcType=INTEGER},
      </if>
      <if test="record.money != null" >
        money = #{record.money,jdbcType=DOUBLE},
      </if>
      <if test="record.createUserId != null" >
        create_user_id = #{record.createUserId,jdbcType=INTEGER},
      </if>
      <if test="record.createDate != null" >
        create_date = #{record.createDate,jdbcType=BIGINT},
      </if>
      <if test="record.settleId != null" >
        settle_id = #{record.settleId,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    <!--
      WARNING - @mbggenerated
    -->
    update t_cash
    set id = #{record.id,jdbcType=INTEGER},
      doctor_id = #{record.doctorId,jdbcType=INTEGER},
      group_id = #{record.groupId,jdbcType=VARCHAR},
      object_type = #{record.objectType,jdbcType=INTEGER},
      money = #{record.money,jdbcType=DOUBLE},
      create_user_id = #{record.createUserId,jdbcType=INTEGER},
      create_date = #{record.createDate,jdbcType=BIGINT},
      settle_id = #{record.settleId,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.dachen.health.pack.incomeNew.entity.po.Cash" >
    <!--
      WARNING - @mbggenerated
    -->
    update t_cash
    <set >
      <if test="doctorId != null" >
        doctor_id = #{doctorId,jdbcType=INTEGER},
      </if>
      <if test="groupId != null" >
        group_id = #{groupId,jdbcType=VARCHAR},
      </if>
      <if test="objectType != null" >
        object_type = #{objectType,jdbcType=INTEGER},
      </if>
      <if test="money != null" >
        money = #{money,jdbcType=DOUBLE},
      </if>
      <if test="createUserId != null" >
        create_user_id = #{createUserId,jdbcType=INTEGER},
      </if>
      <if test="createDate != null" >
        create_date = #{createDate,jdbcType=BIGINT},
      </if>
      <if test="settleId != null" >
        settle_id = #{settleId,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.dachen.health.pack.incomeNew.entity.po.Cash" >
    <!--
      WARNING - @mbggenerated
    -->
    update t_cash
    set doctor_id = #{doctorId,jdbcType=INTEGER},
      group_id = #{groupId,jdbcType=VARCHAR},
      object_type = #{objectType,jdbcType=INTEGER},
      money = #{money,jdbcType=DOUBLE},
      create_user_id = #{createUserId,jdbcType=INTEGER},
      create_date = #{createDate,jdbcType=BIGINT},
      settle_id = #{settleId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  
  <select id="getCashDetailByID" parameterType="java.lang.Integer" resultMap="cashVO">
  		select tc.money,tc.create_date,tb.user_real_name,tb.bank_no as bank_id,tb.bank_name
  		from t_cash tc
  		left join t_settle_new ts on tc.settle_id = ts.id
  		left join t_bank_card tb on ts.bankcard_id = tb.id
  		where tc.id = #{id,jdbcType=INTEGER}
  </select>
</mapper>